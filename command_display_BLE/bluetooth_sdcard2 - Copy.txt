# Import bibliotecas
import machine
from machine import Pin, SPI
from sdcard import SDCard
import os
import time
from ili9341 import ILI9341
import bluetooth
from micropython import const

# Definições de pinos
TFT_CS = const(15)
TFT_DC = const(2)
TFT_SCK = const(14)
TFT_MOSI = const(13)
SD_CS = const(5)
SD_SCK = const(18)
SD_MOSI = const(23)
SD_MISO = const(19)

# Inicialização do SPI para o display TFT
spi = SPI(2, baudrate=20000000, sck=Pin(TFT_SCK), mosi=Pin(TFT_MOSI))
display = ILI9341(spi, cs=Pin(TFT_CS), dc=Pin(TFT_DC), rst=Pin(-1))

# Inicialização do SPI para o cartão SD
spi2 = SPI(1, baudrate=20000000, sck=Pin(SD_SCK), mosi=Pin(SD_MOSI), miso=Pin(SD_MISO))
# Função para inicializar o cartão SD e montar o sistema de arquivos
def init_sd():
    try:
        sd = SDCard(spi2, Pin(SD_CS))
        vfs = os.VfsFat(sd)
        os.mount(vfs, "/sd")
        return vfs
    except Exception as e:
        print("Erro ao inicializar o cartão SD:", e)
        return None
# Inicialização do cartão SD
sd = init_sd()

# Configuração do Bluetooth
device_name="ESP32_Test"
ble = bluetooth.BLE()
ble.active(True)
ble.config(rxbuf=1024)
ble.config(gap_name='device_name')
ble.config('gap_name')
# Serviço e Característica BLE usando UUIDs curtos
SERVICE_UUID = bluetooth.UUID(0x180A)
CHARACTERISTIC_UUID = bluetooth.UUID(0x2A00)
characteristics = (
    (CHARACTERISTIC_UUID, bluetooth.FLAG_WRITE,),
)
command_char = (
    (SERVICE_UUID, characteristics),
)
# Configuração do serviço BLE
srv = ble.gatts_register_services(command_char)
service_handle, char_handles = srv[0]
char_handle=char_handles[0]
ble.gatts_write(char_handle, b'command')

# Função para exibir imagem do cartão SD no display
def display_image(image_path):
    try:
        with open(image_path, 'rb') as f:
            img_data = f.read()
            display.fill(ILI9341.BLACK)  # Limpa a tela
            display.image(0, 0, img_data)
            display.show()
        return True
    except OSError as e:
        print("Erro ao abrir arquivo:", e)
        return False
# Função para listar imagens no cartão SD
def list_images():
    try:
        return [f for f in os.listdir('/sd') if f.endswith('.jpg') or f.endswith('.png')]
    except OSError as e:
        print("Erro ao listar arquivos:", e)
        return []
		
# Callback para tratamento de escrita na característica BLE
def on_command_received(event):
    value = event.data
    try:
        command = value.decode('utf-8')
        if command.startswith('DI:'):
            image_name = command.split(':')[1]
            image_path = f'/sd/{image_name}'
            if display_image(image_path):
                print(f"Imagem {image_name} exibida no display.")
                ble.gatts_notify(0, char_handle, b"OK: Imagem exibida")
            else:
                print(f"Falha ao exibir imagem {image_name} no display.")
                ble.gatts_notify(0, char_handle, b"ERROR: Falha ao exibir imagem")
        elif command == 'LI':
            images = list_images()
            images_str = ','.join(images)
            ble.gatts_notify(0, char_handle, images_str.encode('utf-8'))
    except Exception as e:
        print("Erro ao processar comando:", e)
        ble.gatts_notify(0, char_handle, b"ERROR: Falha ao processar comando")
		
# Função de interrupção para eventos BLE
def ble_irq(event, data):
    if event == bluetooth.IRQ_GATTS_WRITE:  # Evento de escrita
        on_command_received(data)
ble.irq(handler=ble_irq)
print("Aguardando conexão BLE...")

# Loop principal
while True:
    if ble.connections():
        print("Cliente conectado via BLE!")
        time.sleep(1)
    else:
        print("Esperando conexão...")
        time.sleep(1)
